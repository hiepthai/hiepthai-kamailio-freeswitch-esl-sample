#!define WITH_DEBUG
#!define WITH_AUTH
#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 2
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=DBGLEVEL

/* set to 'yes' to print log messages to terminal or use '-E' cli option */
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=8

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048

#!ifdef WITH_JSONRPC
tcp_accept_no_cl=yes
#!endif

#!ifdef WITH_TLS
enable_tls=yes

/* upper limit for TLS connections */
tls_max_connections=2048
#!endif

/* set it to yes to enable sctp and load sctp.so module */
enable_sctp=no

####### Custom Parameters #########

freeswitch.bindip = "127.0.0.1" desc "FreeSWITCH IP Address"
freeswitch.bindport = "5080" desc "FreeSWITCH Port"

####### Modules Section ########

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

#!ifdef WITH_NAT
loadmodule "nathelper.so"
# loadmodule "rtpengine.so"
loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

loadmodule "outbound.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

#!ifdef WITH_NAT
#!ifdef WITH_RTPENGINE
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
#!else
# ----- rtpproxy params -----
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
#!endif
# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route

route {
    # per request initial checks
    route(REQINIT);

    # NAT detection
    route(NAT);

    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # CANCEL processing
    if (is_method("CANCEL"))
    {
        if (t_check_trans())
            t_relay();
        exit;
    }

    t_check_trans();

    # authentication
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE"))
        record_route();

    # account only INVITEs
    if (is_method("INVITE"))
    {
        setflag(FLT_ACC); # do accounting
    }

    ### requests for my local domains

    # handle presence related requests
    route(PRESENCE);

    # handle registrations
    route(REGISTRAR);

    if ($rU==$null)
    {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # save callee ID
    $avp(callee) = $rU;
    route(FSDISPATCH);

    # user location service
    route(LOCATION);

    route(RELAY);
}

route[AUTH] {
	if (is_method("REGISTER"))
	{
	    save("location");
	    exit;
	} else {

	if(route(FSINBOUND))
		return;
		# authenticate if from local subscriber
		if (from_uri==myself)
		{
			exit;
			# caller authenticated
		} else {
			# caller is not local subscriber, then check if it calls
			# a local destination, otherwise deny, not an open relay here
			if (!uri==myself)
			{
				sl_send_reply("403","Not relaying");
				exit;
			}
		}
	}
	return;
}

# FreeSWITCH routing blocks
route[FSINBOUND] {
	if($si== $sel(cfg_get.freeswitch.bindip)
			&& $sp==$sel(cfg_get.freeswitch.bindport))
		return 1;
	return -1;
}

route[FSDISPATCH] {
	if(!is_method("INVITE"))
		return;
	if(route(FSINBOUND))
		return;

	# dial number selection
	switch($rU) {
		case /"^41$":
			# 41 - voicebox menu
			# allow only authenticated users
			if($au==$null)
			{
				sl_send_reply("403", "Not allowed");
				exit;
			}
			$rU = "vm-" + $au;
		break;
		case /"^441[0-9][0-9]$":
			# starting with 44 folowed by 1XY - direct call to voice box
			strip(2);
			route(FSVBOX);
		break;
		case /"^433[01][0-9][0-9]$":
			# starting with 433 folowed by (0|1)XY - conference
			strip(2);
		break;
		case /"^45[0-9]+$":
			strip(2);
		break;
		default:
			# offline - send to voicebox
			if (!registered("location"))
			{
				route(FSVBOX);
				exit;
			}
			# online - do bridging
			prefix("kb-");
			if(is_method("INVITE"))
			{
				# in case of failure - re-route to FreeSWITCH VoiceMail
				t_on_failure("FAIL_FSVBOX");
			}
	}
	route(FSRELAY);
	exit;
}

route[FSVBOX] {
	if(!($rU=~"^1[0-9][0-9]+$"))
		return;
	prefix("vb-");
	route(FSRELAY);
}

# Send to FreeSWITCH
route[FSRELAY] {
	$du = "sip:" + $sel(cfg_get.freeswitch.bindip) + ":"
			+ $sel(cfg_get.freeswitch.bindport);
	if($var(newbranch)==1)
	{
		append_branch();
		$var(newbranch) = 0;
	}
	route(RELAY);
	exit;
}

failure_route[FAIL_FSVBOX] {
#!ifdef WITH_NAT
	if (is_method("INVITE")
			&& (isbflagset(FLB_NATB) || isflagset(FLT_NATS))) {
		unforce_rtp_proxy();
	}
#!endif

	if (t_is_canceled()) {
		exit;
	}

	if (t_check_status("486|408")) {
		# re-route to FreeSWITCH VoiceMail
		$rU = $avp(callee);
		$var(newbranch) = 1;
		route(FSVBOX);
	}
}

route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

route[NAT] {
#!ifdef WITH_NAT
	force_rport();
	if (nat_uac_test("19")) {
		if (method=="REGISTER") {
			fix_nated_register();
		} else {
			fix_nated_contact();
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if (is_method("BYE")) {
				setflag(FLT_ACC); # do accounting ...
				setflag(FLT_ACCFAILED); # ... even if the transaction fails
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# USER location service
route[LOCATION] {

	if (!lookup("location")) {
		switch ($rc) {
			case -1:
			case -3:
				t_newtran();
				t_reply("404", "Not Found");
				exit;
			case -2:
				sl_send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE"))
	{
		setflag(FLT_ACCMISSED);
	}
}

route[RELAY] {
#!ifdef WITH_NAT
	if (check_route_param("nat=yes")) {
		setbflag(FLB_NATB);
	}
	if (isflagset(FLT_NATS) || isbflagset(FLB_NATB)) {
		route(RTPPROXY);
	}
#!endif

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Presence server route
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

#!ifdef WITH_PRESENCE
	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
		t_release();
	}
	exit;
#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# RTPProxy control
route[RTPPROXY] {
#!ifdef WITH_NAT
	if (is_method("BYE")) {
		unforce_rtp_proxy();
	} else if (is_method("INVITE")){
		force_rtp_proxy();
	}
	if (!has_totag()) add_rr_param(";nat=yes");
#!endif
	return;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging
			## setbflag(FLB_NATSIPPING);
		}
		if (!save("location"))
			sl_reply_error();

		exit;
	}
}